// Do not edit this file; automatically generated by gulp.
'use strict';


Blockly.Dic = new Blockly.Generator("Dic");
Blockly.Dic.addReservedWords("break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments," + Object.getOwnPropertyNames(Blockly.utils.global).join(","));
Blockly.Dic.ORDER_ATOMIC = 0;
Blockly.Dic.ORDER_NEW = 1.1;
Blockly.Dic.ORDER_MEMBER = 1.2;
Blockly.Dic.ORDER_FUNCTION_CALL = 2;
Blockly.Dic.ORDER_INCREMENT = 3;
Blockly.Dic.ORDER_DECREMENT = 3;
Blockly.Dic.ORDER_BITWISE_NOT = 4.1;
Blockly.Dic.ORDER_UNARY_PLUS = 4.2;
Blockly.Dic.ORDER_UNARY_NEGATION = 4.3;
Blockly.Dic.ORDER_LOGICAL_NOT = 4.4;
Blockly.Dic.ORDER_TYPEOF = 4.5;
Blockly.Dic.ORDER_VOID = 4.6;
Blockly.Dic.ORDER_DELETE = 4.7;
Blockly.Dic.ORDER_AWAIT = 4.8;
Blockly.Dic.ORDER_EXPONENTIATION = 5;
Blockly.Dic.ORDER_MULTIPLICATION = 5.1;
Blockly.Dic.ORDER_DIVISION = 5.2;
Blockly.Dic.ORDER_MODULUS = 5.3;
Blockly.Dic.ORDER_SUBTRACTION = 6.1;
Blockly.Dic.ORDER_ADDITION = 6.2;
Blockly.Dic.ORDER_BITWISE_SHIFT = 7;
Blockly.Dic.ORDER_RELATIONAL = 8;
Blockly.Dic.ORDER_IN = 8;
Blockly.Dic.ORDER_INSTANCEOF = 8;
Blockly.Dic.ORDER_EQUALITY = 9;
Blockly.Dic.ORDER_BITWISE_AND = 10;
Blockly.Dic.ORDER_BITWISE_XOR = 11;
Blockly.Dic.ORDER_BITWISE_OR = 12;
Blockly.Dic.ORDER_LOGICAL_AND = 13;
Blockly.Dic.ORDER_LOGICAL_OR = 14;
Blockly.Dic.ORDER_CONDITIONAL = 15;
Blockly.Dic.ORDER_ASSIGNMENT = 16;
Blockly.Dic.ORDER_YIELD = 17;
Blockly.Dic.ORDER_COMMA = 18;
Blockly.Dic.ORDER_NONE = 99;
Blockly.Dic.ORDER_OVERRIDES = [
    [Blockly.Dic.ORDER_FUNCTION_CALL, Blockly.Dic.ORDER_MEMBER],
    [Blockly.Dic.ORDER_FUNCTION_CALL, Blockly.Dic.ORDER_FUNCTION_CALL],
    [Blockly.Dic.ORDER_MEMBER, Blockly.Dic.ORDER_MEMBER],
    [Blockly.Dic.ORDER_MEMBER, Blockly.Dic.ORDER_FUNCTION_CALL],
    [Blockly.Dic.ORDER_LOGICAL_NOT, Blockly.Dic.ORDER_LOGICAL_NOT],
    [Blockly.Dic.ORDER_MULTIPLICATION, Blockly.Dic.ORDER_MULTIPLICATION],
    [Blockly.Dic.ORDER_ADDITION,
        Blockly.Dic.ORDER_ADDITION
    ],
    [Blockly.Dic.ORDER_LOGICAL_AND, Blockly.Dic.ORDER_LOGICAL_AND],
    [Blockly.Dic.ORDER_LOGICAL_OR, Blockly.Dic.ORDER_LOGICAL_OR]
];
Blockly.Dic.init = function (a) {
    Blockly.Dic.definitions_ = Object.create(null);
    Blockly.Dic.functionNames_ = Object.create(null);
    Blockly.Dic.variableDB_ ? Blockly.Dic.variableDB_.reset() : Blockly.Dic.variableDB_ = new Blockly.Names(Blockly.Dic.RESERVED_WORDS_);
    Blockly.Dic.variableDB_.setVariableMap(a.getVariableMap());
    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Dic.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    a = Blockly.Variables.allUsedVarModels(a);
    for (d = 0; d < a.length; d++) b.push(Blockly.Dic.variableDB_.getName(a[d].getId(), Blockly.VARIABLE_CATEGORY_NAME));
    //b.length && (Blockly.Dic.definitions_.variables = "$" + b.join(", ") + "")
};
Blockly.Dic.finish = function (a) {
    var b = [],
        c;
    for (c in Blockly.Dic.definitions_) b.push(Blockly.Dic.definitions_[c]);
    delete Blockly.Dic.definitions_;
    delete Blockly.Dic.functionNames_;
    Blockly.Dic.variableDB_.reset();
    return b.join("\n\n") + "\n\n\n" + a
};
Blockly.Dic.scrubNakedValue = function (a) {
    return a + ";\n"
    //return a + "\n"
};
Blockly.Dic.quote_ = function (a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "" + a + ""
};
Blockly.Dic.multiline_quote_ = function (a) {
    return a.split(/\n/g).map(Blockly.Dic.quote_).join(" + '\\n' +\n")
};
Blockly.Dic.scrub_ = function (a, b, c) {
    var d = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
        var e = a.getCommentText();
        e && (e = Blockly.utils.string.wrap(e, Blockly.Dic.COMMENT_WRAP - 3), d += Blockly.Dic.prefixLines(e + "\n", "// "));
        for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Dic.allNestedComments(e)) && (d += Blockly.Dic.prefixLines(e, "// "))
    }
    a = a.nextConnection && a.nextConnection.targetBlock();
    c = c ? "" : Blockly.Dic.blockToCode(a);
    return d + b + c
};
Blockly.Dic.getAdjusted = function (a, b, c, d, e) {
    c = c || 0;
    e = e || Blockly.Dic.ORDER_NONE;
    a.workspace.options.oneBasedIndex && c--;
    var f = a.workspace.options.oneBasedIndex ? "1" : "0";
    a = 0 < c ? Blockly.Dic.valueToCode(a, b, Blockly.Dic.ORDER_ADDITION) || f : 0 > c ? Blockly.Dic.valueToCode(a, b, Blockly.Dic.ORDER_SUBTRACTION) || f : d ? Blockly.Dic.valueToCode(a, b, Blockly.Dic.ORDER_UNARY_NEGATION) || f : Blockly.Dic.valueToCode(a, b, e) || f;
    if (Blockly.isNumber(a)) a = Number(a) + c, d &&
        (a = -a);
    else {
        if (0 < c) {
            a = a + " + " + c;
            var g = Blockly.Dic.ORDER_ADDITION
        } else 0 > c && (a = a + " - " + -c, g = Blockly.Dic.ORDER_SUBTRACTION);
        d && (a = c ? "-(" + a + ")" : "-" + a, g = Blockly.Dic.ORDER_UNARY_NEGATION);
        g = Math.floor(g);
        e = Math.floor(e);
        /*g && e >= g && (a = "(" + a + ")")*/
        g && e >= g && (a = "" + a + "")
    }
    return a
};
/*Blockly.Dic.colour = {};
Blockly.Dic.colour_picker = function (a) {
    return [Blockly.Dic.quote_(a.getFieldValue("COLOUR")), Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.colour_random = function (a) {
    return [Blockly.Dic.provideFunction_("colourRandom", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  var num = Math.floor(Math.random() * Math.pow(2, 24));", "  return '#' + ('00000' + num.toString(16)).substr(-6);", "}"]) + "()", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.colour_rgb = function (a) {
    var b = Blockly.Dic.valueToCode(a, "RED", Blockly.Dic.ORDER_COMMA) || 0,
        c = Blockly.Dic.valueToCode(a, "GREEN", Blockly.Dic.ORDER_COMMA) || 0;
    a = Blockly.Dic.valueToCode(a, "BLUE", Blockly.Dic.ORDER_COMMA) || 0;
    return [Blockly.Dic.provideFunction_("colourRgb", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b) {", "  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;", "  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;",
        "  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;", "  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);", "  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);", "  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"
    ]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.colour_blend = function (a) {
    var b = Blockly.Dic.valueToCode(a, "COLOUR1", Blockly.Dic.ORDER_COMMA) || "'#000000'",
        c = Blockly.Dic.valueToCode(a, "COLOUR2", Blockly.Dic.ORDER_COMMA) || "'#000000'";
    a = Blockly.Dic.valueToCode(a, "RATIO", Blockly.Dic.ORDER_COMMA) || .5;
    return [Blockly.Dic.provideFunction_("colourBlend", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(c1, c2, ratio) {", "  ratio = Math.max(Math.min(Number(ratio), 1), 0);", "  var r1 = parseInt(c1.substring(1, 3), 16);",
        "  var g1 = parseInt(c1.substring(3, 5), 16);", "  var b1 = parseInt(c1.substring(5, 7), 16);", "  var r2 = parseInt(c2.substring(1, 3), 16);", "  var g2 = parseInt(c2.substring(3, 5), 16);", "  var b2 = parseInt(c2.substring(5, 7), 16);", "  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);", "  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);", "  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);", "  r = ('0' + (r || 0).toString(16)).slice(-2);", "  g = ('0' + (g || 0).toString(16)).slice(-2);", "  b = ('0' + (b || 0).toString(16)).slice(-2);",
        "  return '#' + r + g + b;", "}"
    ]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists = {};
Blockly.Dic.lists_create_empty = function (a) {
    return ["[]", Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.lists_create_with = function (a) {
    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Dic.valueToCode(a, "ADD" + c, Blockly.Dic.ORDER_COMMA) || "null";
    return ["[" + b.join(", ") + "]", Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.lists_repeat = function (a) {
    var b = Blockly.Dic.provideFunction_("listsRepeat", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(value, n) {", "  var array = [];", "  for (var i = 0; i < n; i++) {", "    array[i] = value;", "  }", "  return array;", "}"]),
        c = Blockly.Dic.valueToCode(a, "ITEM", Blockly.Dic.ORDER_COMMA) || "null";
    a = Blockly.Dic.valueToCode(a, "NUM", Blockly.Dic.ORDER_COMMA) || "0";
    return [b + "(" + c + ", " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists_length = function (a) {
    return [(Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_MEMBER) || "[]") + ".length", Blockly.Dic.ORDER_MEMBER]
};
Blockly.Dic.lists_isEmpty = function (a) {
    return ["!" + (Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_MEMBER) || "[]") + ".length", Blockly.Dic.ORDER_LOGICAL_NOT]
};
Blockly.Dic.lists_indexOf = function (a) {
    var b = "FIRST" == a.getFieldValue("END") ? "indexOf" : "lastIndexOf",
        c = Blockly.Dic.valueToCode(a, "FIND", Blockly.Dic.ORDER_NONE) || "''";
    b = (Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_MEMBER) || "[]") + "." + b + "(" + c + ")";
    return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.Dic.ORDER_ADDITION] : [b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists_getIndex = function (a) {
    var b = a.getFieldValue("MODE") || "GET",
        c = a.getFieldValue("WHERE") || "FROM_START",
        d = Blockly.Dic.valueToCode(a, "VALUE", "RANDOM" == c ? Blockly.Dic.ORDER_COMMA : Blockly.Dic.ORDER_MEMBER) || "[]";
    switch (c) {
        case "FIRST":
            if ("GET" == b) return [d + "[0]", Blockly.Dic.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".shift()", Blockly.Dic.ORDER_MEMBER];
            if ("REMOVE" == b) return d + ".shift();\n";
            break;
        case "LAST":
            if ("GET" == b) return [d + ".slice(-1)[0]", Blockly.Dic.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".pop()", Blockly.Dic.ORDER_MEMBER];
            if ("REMOVE" == b) return d + ".pop();\n";
            break;
        case "FROM_START":
            a = Blockly.Dic.getAdjusted(a, "AT");
            if ("GET" == b) return [d + "[" + a + "]", Blockly.Dic.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".splice(" + a + ", 1)[0]", Blockly.Dic.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + ".splice(" + a + ", 1);\n";
            break;
        case "FROM_END":
            a = Blockly.Dic.getAdjusted(a, "AT", 1, !0);
            if ("GET" == b) return [d + ".slice(" + a + ")[0]", Blockly.Dic.ORDER_FUNCTION_CALL];
            if ("GET_REMOVE" == b) return [d + ".splice(" + a + ", 1)[0]", Blockly.Dic.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + ".splice(" + a + ", 1);";
            break;
        case "RANDOM":
            d = Blockly.Dic.provideFunction_("listsGetRandomItem", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(list, remove) {", "  var x = Math.floor(Math.random() * list.length);", "  if (remove) {", "    return list.splice(x, 1)[0];", "  } else {", "    return list[x];", "  }", "}"]) + "(" + d + ", " + ("GET" != b) + ")";
            if ("GET" == b || "GET_REMOVE" == b) return [d,
                Blockly.Dic.ORDER_FUNCTION_CALL
            ];
            if ("REMOVE" == b) return d + ";\n"
    }
    throw Error("Unhandled combination (lists_getIndex).");
};
Blockly.Dic.lists_setIndex = function (a) {
    function b() {
        if (c.match(/^\w+$/)) return "";
        var a = Blockly.Dic.variableDB_.getDistinctName("tmpList", Blockly.VARIABLE_CATEGORY_NAME),
            b = "var " + a + " = " + c + ";\n";
        c = a;
        return b
    }
    var c = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_MEMBER) || "[]",
        d = a.getFieldValue("MODE") || "GET",
        e = a.getFieldValue("WHERE") || "FROM_START",
        f = Blockly.Dic.valueToCode(a, "TO", Blockly.Dic.ORDER_ASSIGNMENT) || "null";
    switch (e) {
        case "FIRST":
            if ("SET" == d) return c +
                "[0] = " + f + ";\n";
            if ("INSERT" == d) return c + ".unshift(" + f + ");\n";
            break;
        case "LAST":
            if ("SET" == d) return a = b(), a + (c + "[" + c + ".length - 1] = " + f + ";\n");
            if ("INSERT" == d) return c + ".push(" + f + ");\n";
            break;
        case "FROM_START":
            e = Blockly.Dic.getAdjusted(a, "AT");
            if ("SET" == d) return c + "[" + e + "] = " + f + ";\n";
            if ("INSERT" == d) return c + ".splice(" + e + ", 0, " + f + ");\n";
            break;
        case "FROM_END":
            e = Blockly.Dic.getAdjusted(a, "AT", 1, !1, Blockly.Dic.ORDER_SUBTRACTION);
            a = b();
            if ("SET" == d) return a + (c + "[" + c + ".length - " + e +
                "] = " + f + ";\n");
            if ("INSERT" == d) return a + (c + ".splice(" + c + ".length - " + e + ", 0, " + f + ");\n");
            break;
        case "RANDOM":
            a = b();
            e = Blockly.Dic.variableDB_.getDistinctName("tmpX", Blockly.VARIABLE_CATEGORY_NAME);
            a += "var " + e + " = Math.floor(Math.random() * " + c + ".length);\n";
            if ("SET" == d) return a + (c + "[" + e + "] = " + f + ";\n");
            if ("INSERT" == d) return a + (c + ".splice(" + e + ", 0, " + f + ");\n")
    }
    throw Error("Unhandled combination (lists_setIndex).");
};
Blockly.Dic.lists.getIndex_ = function (a, b, c) {
    return "FIRST" == b ? "0" : "FROM_END" == b ? a + ".length - 1 - " + c : "LAST" == b ? a + ".length - 1" : c
};
Blockly.Dic.lists_getSublist = function (a) {
    var b = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_MEMBER) || "[]",
        c = a.getFieldValue("WHERE1"),
        d = a.getFieldValue("WHERE2");
    if ("FIRST" == c && "LAST" == d) b += ".slice(0)";
    else if (b.match(/^\w+$/) || "FROM_END" != c && "FROM_START" == d) {
        switch (c) {
            case "FROM_START":
                var e = Blockly.Dic.getAdjusted(a, "AT1");
                break;
            case "FROM_END":
                e = Blockly.Dic.getAdjusted(a, "AT1", 1, !1, Blockly.Dic.ORDER_SUBTRACTION);
                e = b + ".length - " + e;
                break;
            case "FIRST":
                e =
                    "0";
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        switch (d) {
            case "FROM_START":
                a = Blockly.Dic.getAdjusted(a, "AT2", 1);
                break;
            case "FROM_END":
                a = Blockly.Dic.getAdjusted(a, "AT2", 0, !1, Blockly.Dic.ORDER_SUBTRACTION);
                a = b + ".length - " + a;
                break;
            case "LAST":
                a = b + ".length";
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        b = b + ".slice(" + e + ", " + a + ")"
    } else {
        e = Blockly.Dic.getAdjusted(a, "AT1");
        a = Blockly.Dic.getAdjusted(a, "AT2");
        var f = Blockly.Dic.lists.getIndex_,
            g = {
                FIRST: "First",
                LAST: "Last",
                FROM_START: "FromStart",
                FROM_END: "FromEnd"
            };
        b = Blockly.Dic.provideFunction_("subsequence" + g[c] + g[d], ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == c || "FROM_START" == c ? ", at1" : "") + ("FROM_END" == d || "FROM_START" == d ? ", at2" : "") + ") {", "  var start = " + f("sequence", c, "at1") + ";", "  var end = " + f("sequence", d, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]) + "(" + b + ("FROM_END" == c || "FROM_START" == c ? ", " + e : "") + ("FROM_END" == d || "FROM_START" ==
            d ? ", " + a : "") + ")"
    }
    return [b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists_sort = function (a) {
    var b = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_FUNCTION_CALL) || "[]",
        c = "1" === a.getFieldValue("DIRECTION") ? 1 : -1;
    a = a.getFieldValue("TYPE");
    var d = Blockly.Dic.provideFunction_("listsGetSortCompare", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(type, direction) {", "  var compareFuncs = {", '    "NUMERIC": function(a, b) {', "        return Number(a) - Number(b); },", '    "TEXT": function(a, b) {', "        return a.toString() > b.toString() ? 1 : -1; },",
        '    "IGNORE_CASE": function(a, b) {', "        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },", "  };", "  var compare = compareFuncs[type];", "  return function(a, b) { return compare(a, b) * direction; }", "}"
    ]);
    return [b + ".slice().sort(" + d + '("' + a + '", ' + c + "))", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists_split = function (a) {
    var b = Blockly.Dic.valueToCode(a, "INPUT", Blockly.Dic.ORDER_MEMBER),
        c = Blockly.Dic.valueToCode(a, "DELIM", Blockly.Dic.ORDER_NONE) || "''";
    a = a.getFieldValue("MODE");
    if ("SPLIT" == a) b || (b = "''"), a = "split";
    else if ("JOIN" == a) b || (b = "[]"), a = "join";
    else throw Error("Unknown mode: " + a);
    return [b + "." + a + "(" + c + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.lists_reverse = function (a) {
    return [(Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_FUNCTION_CALL) || "[]") + ".slice().reverse()", Blockly.Dic.ORDER_FUNCTION_CALL]
};*/
Blockly.Dic.logic = {};
Blockly.Dic.controls_if = function (a) {
    var b = 0,
        c = "";
    Blockly.Dic.STATEMENT_PREFIX && (c += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_PREFIX, a));
    do {
        var d = Blockly.Dic.valueToCode(a, "IF" + b, Blockly.Dic.ORDER_NONE) || "false";
        var e = Blockly.Dic.statementToCode(a, "DO" + b);
        Blockly.Dic.STATEMENT_SUFFIX && (e = Blockly.Dic.prefixLines(Blockly.Dic.injectId(Blockly.Dic.STATEMENT_SUFFIX, a), Blockly.Dic.INDENT) + e);
        c += (0 < b ? " else " : "") + "if (" +
            d + ") {\n" + e + "}";
        ++b
    } while (a.getInput("IF" + b));
    if (a.getInput("ELSE") || Blockly.Dic.STATEMENT_SUFFIX) e = Blockly.Dic.statementToCode(a, "ELSE"), Blockly.Dic.STATEMENT_SUFFIX && (e = Blockly.Dic.prefixLines(Blockly.Dic.injectId(Blockly.Dic.STATEMENT_SUFFIX, a), Blockly.Dic.INDENT) + e), c += " else {\n" + e + "}";
    return c + "\n"
};
Blockly.Dic.controls_ifelse = Blockly.Dic.controls_if;
Blockly.Dic.logic_compare = function (a) {
    var b = {
            EQ: "==",
            NEQ: "!=",
            LT: "<",
            LTE: "<=",
            GT: ">",
            GTE: ">="
        } [a.getFieldValue("OP")],
        c = "==" == b || "!=" == b ? Blockly.Dic.ORDER_EQUALITY : Blockly.Dic.ORDER_RELATIONAL,
        d = Blockly.Dic.valueToCode(a, "A", c) || "0";
    a = Blockly.Dic.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
};
Blockly.Dic.logic_operation = function (a) {
    var b = "AND" == a.getFieldValue("OP") ? "&&" : "||",
        c = "&&" == b ? Blockly.Dic.ORDER_LOGICAL_AND : Blockly.Dic.ORDER_LOGICAL_OR,
        d = Blockly.Dic.valueToCode(a, "A", c);
    a = Blockly.Dic.valueToCode(a, "B", c);
    if (d || a) {
        var e = "&&" == b ? "true" : "false";
        d || (d = e);
        a || (a = e)
    } else a = d = "false";
    return [d + " " + b + " " + a, c]
};
Blockly.Dic.logic_negate = function (a) {
    var b = Blockly.Dic.ORDER_LOGICAL_NOT;
    return ["!" + (Blockly.Dic.valueToCode(a, "BOOL", b) || "true"), b]
};
Blockly.Dic.logic_boolean = function (a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "true" : "false", Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.logic_null = function (a) {
    return ["null", Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.logic_ternary = function (a) {
    var b = Blockly.Dic.valueToCode(a, "IF", Blockly.Dic.ORDER_CONDITIONAL) || "false",
        c = Blockly.Dic.valueToCode(a, "THEN", Blockly.Dic.ORDER_CONDITIONAL) || "null";
    a = Blockly.Dic.valueToCode(a, "ELSE", Blockly.Dic.ORDER_CONDITIONAL) || "null";
    return [b + " ? " + c + " : " + a, Blockly.Dic.ORDER_CONDITIONAL]
};
Blockly.Dic.loops = {};
Blockly.Dic.controls_repeat_ext = function (a) {
    var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.Dic.valueToCode(a, "TIMES", Blockly.Dic.ORDER_ASSIGNMENT) || "0",
        c = Blockly.Dic.statementToCode(a, "DO");
    c = Blockly.Dic.addLoopTrap(c, a);
    a = "";
    var d = Blockly.Dic.variableDB_.getDistinctName("count", Blockly.VARIABLE_CATEGORY_NAME),
        e = b;
    b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.Dic.variableDB_.getDistinctName("repeat_end", Blockly.VARIABLE_CATEGORY_NAME),
        a += "var " + e + " = " + b + ";\n");
    return a + ("for (var " + d + " = 0; " + d + " < " + e + "; " + d + "++) {\n" + c + "}\n")
};
Blockly.Dic.controls_repeat = Blockly.Dic.controls_repeat_ext;
Blockly.Dic.controls_whileUntil = function (a) {
    var b = "UNTIL" == a.getFieldValue("MODE"),
        c = Blockly.Dic.valueToCode(a, "BOOL", b ? Blockly.Dic.ORDER_LOGICAL_NOT : Blockly.Dic.ORDER_NONE) || "false",
        d = Blockly.Dic.statementToCode(a, "DO");
    d = Blockly.Dic.addLoopTrap(d, a);
    b && (c = "!" + c);
    return "while (" + c + ") {\n" + d + "}\n"
};
Blockly.Dic.controls_for = function (a) {
    var b = Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME),
        c = Blockly.Dic.valueToCode(a, "FROM", Blockly.Dic.ORDER_ASSIGNMENT) || "0",
        d = Blockly.Dic.valueToCode(a, "TO", Blockly.Dic.ORDER_ASSIGNMENT) || "0",
        e = Blockly.Dic.valueToCode(a, "BY", Blockly.Dic.ORDER_ASSIGNMENT) || "1",
        f = Blockly.Dic.statementToCode(a, "DO");
    f = Blockly.Dic.addLoopTrap(f, a);
    if (Blockly.isNumber(c) && Blockly.isNumber(d) &&
        Blockly.isNumber(e)) {
        var g = Number(c) <= Number(d);
        a = "for (" + b + " = " + c + "; " + b + (g ? " <= " : " >= ") + d + "; " + b;
        b = Math.abs(Number(e));
        a = (1 == b ? a + (g ? "++" : "--") : a + ((g ? " += " : " -= ") + b)) + (") {\n" + f + "}\n")
    } else a = "", g = c, c.match(/^\w+$/) || Blockly.isNumber(c) || (g = Blockly.Dic.variableDB_.getDistinctName(b + "_start", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + g + " = " + c + ";\n"), c = d, d.match(/^\w+$/) || Blockly.isNumber(d) || (c = Blockly.Dic.variableDB_.getDistinctName(b + "_end", Blockly.VARIABLE_CATEGORY_NAME), a +=
        "var " + c + " = " + d + ";\n"), d = Blockly.Dic.variableDB_.getDistinctName(b + "_inc", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + d + " = ", a = Blockly.isNumber(e) ? a + (Math.abs(e) + ";\n") : a + ("Math.abs(" + e + ");\n"), a = a + ("if (" + g + " > " + c + ") {\n") + (Blockly.Dic.INDENT + d + " = -" + d + ";\n"), a += "}\n", a += "for (" + b + " = " + g + "; " + d + " >= 0 ? " + b + " <= " + c + " : " + b + " >= " + c + "; " + b + " += " + d + ") {\n" + f + "}\n";
    return a
};
Blockly.Dic.controls_forEach = function (a) {
    var b = Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME),
        c = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_ASSIGNMENT) || "[]",
        d = Blockly.Dic.statementToCode(a, "DO");
    d = Blockly.Dic.addLoopTrap(d, a);
    a = "";
    var e = c;
    c.match(/^\w+$/) || (e = Blockly.Dic.variableDB_.getDistinctName(b + "_list", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + e + " = " + c + ";\n");
    c = Blockly.Dic.variableDB_.getDistinctName(b +
        "_index", Blockly.VARIABLE_CATEGORY_NAME);
    d = Blockly.Dic.INDENT + b + " = " + e + "[" + c + "];\n" + d;
    return a + ("for (var " + c + " in " + e + ") {\n" + d + "}\n")
};
Blockly.Dic.controls_flow_statements = function (a) {
    var b = "";
    Blockly.Dic.STATEMENT_PREFIX && (b += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_PREFIX, a));
    Blockly.Dic.STATEMENT_SUFFIX && (b += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_SUFFIX, a));
    if (Blockly.Dic.STATEMENT_PREFIX) {
        var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);
        c && !c.suppressPrefixSuffix && (b += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_PREFIX,
            c))
    }
    switch (a.getFieldValue("FLOW")) {
        case "BREAK":
            return b + "break;\n";
        case "CONTINUE":
            return b + "continue;\n"
    }
    throw Error("Unknown flow statement.");
};
Blockly.Dic.math = {};
Blockly.Dic.math_number = function (a) {
    a = Number(a.getFieldValue("NUM"));
    return [a, 0 <= a ? Blockly.Dic.ORDER_ATOMIC : Blockly.Dic.ORDER_UNARY_NEGATION]
};
Blockly.Dic.math_arithmetic = function (a) {
    var b = {
            ADD: [" + ", Blockly.Dic.ORDER_ADDITION],
            MINUS: [" - ", Blockly.Dic.ORDER_SUBTRACTION],
            MULTIPLY: [" * ", Blockly.Dic.ORDER_MULTIPLICATION],
            DIVIDE: [" / ", Blockly.Dic.ORDER_DIVISION],
            POWER: [null, Blockly.Dic.ORDER_COMMA]
        } [a.getFieldValue("OP")],
        c = b[0];
    b = b[1];
    var d = Blockly.Dic.valueToCode(a, "A", b) || "0";
    a = Blockly.Dic.valueToCode(a, "B", b) || "0";
    return c ? [d + c + a, b] : ["Math.pow(" + d + ", " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.math_single = function (a) {
    var b = a.getFieldValue("OP");
    if ("NEG" == b) return a = Blockly.Dic.valueToCode(a, "NUM", Blockly.Dic.ORDER_UNARY_NEGATION) || "0", "-" == a[0] && (a = " " + a), ["-" + a, Blockly.Dic.ORDER_UNARY_NEGATION];
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Dic.valueToCode(a, "NUM", Blockly.Dic.ORDER_DIVISION) || "0" : Blockly.Dic.valueToCode(a, "NUM", Blockly.Dic.ORDER_NONE) || "0";
    switch (b) {
        case "ABS":
            var c = "Math.abs(" + a + ")";
            break;
        case "ROOT":
            c = "Math.sqrt(" +
                a + ")";
            break;
        case "LN":
            c = "Math.log(" + a + ")";
            break;
        case "EXP":
            c = "Math.exp(" + a + ")";
            break;
        case "POW10":
            c = "Math.pow(10," + a + ")";
            break;
        case "ROUND":
            c = "Math.round(" + a + ")";
            break;
        case "ROUNDUP":
            c = "Math.ceil(" + a + ")";
            break;
        case "ROUNDDOWN":
            c = "Math.floor(" + a + ")";
            break;
        case "SIN":
            c = "Math.sin(" + a + " / 180 * Math.PI)";
            break;
        case "COS":
            c = "Math.cos(" + a + " / 180 * Math.PI)";
            break;
        case "TAN":
            c = "Math.tan(" + a + " / 180 * Math.PI)"
    }
    if (c) return [c, Blockly.Dic.ORDER_FUNCTION_CALL];
    switch (b) {
        case "LOG10":
            c = "Math.log(" + a +
                ") / Math.log(10)";
            break;
        case "ASIN":
            c = "Math.asin(" + a + ") / Math.PI * 180";
            break;
        case "ACOS":
            c = "Math.acos(" + a + ") / Math.PI * 180";
            break;
        case "ATAN":
            c = "Math.atan(" + a + ") / Math.PI * 180";
            break;
        default:
            throw Error("Unknown math operator: " + b);
    }
    return [c, Blockly.Dic.ORDER_DIVISION]
};
Blockly.Dic.math_constant = function (a) {
    return {
        PI: ["Math.PI", Blockly.Dic.ORDER_MEMBER],
        E: ["Math.E", Blockly.Dic.ORDER_MEMBER],
        GOLDEN_RATIO: ["(1 + Math.sqrt(5)) / 2", Blockly.Dic.ORDER_DIVISION],
        SQRT2: ["Math.SQRT2", Blockly.Dic.ORDER_MEMBER],
        SQRT1_2: ["Math.SQRT1_2", Blockly.Dic.ORDER_MEMBER],
        INFINITY: ["Infinity", Blockly.Dic.ORDER_ATOMIC]
    } [a.getFieldValue("CONSTANT")]
};
Blockly.Dic.math_number_property = function (a) {
    var b = Blockly.Dic.valueToCode(a, "NUMBER_TO_CHECK", Blockly.Dic.ORDER_MODULUS) || "0",
        c = a.getFieldValue("PROPERTY");
    if ("PRIME" == c) return [Blockly.Dic.provideFunction_("mathIsPrime", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;", "  }", "  // False if n is NaN, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.",
        "  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}"
    ]) + "(" + b + ")", Blockly.Dic.ORDER_FUNCTION_CALL];
    switch (c) {
        case "EVEN":
            var d = b + " % 2 == 0";
            break;
        case "ODD":
            d = b + " % 2 == 1";
            break;
        case "WHOLE":
            d = b + " % 1 == 0";
            break;
        case "POSITIVE":
            d =
                b + " > 0";
            break;
        case "NEGATIVE":
            d = b + " < 0";
            break;
        case "DIVISIBLE_BY":
            a = Blockly.Dic.valueToCode(a, "DIVISOR", Blockly.Dic.ORDER_MODULUS) || "0", d = b + " % " + a + " == 0"
    }
    return [d, Blockly.Dic.ORDER_EQUALITY]
};
Blockly.Dic.math_change = function (a) {
    var b = Blockly.Dic.valueToCode(a, "DELTA", Blockly.Dic.ORDER_ADDITION) || "0";
    a = Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME);
    return a + " = (typeof " + a + " == 'number' ? " + a + " : 0) + " + b + ";\n"
};
Blockly.Dic.math_round = Blockly.Dic.math_single;
Blockly.Dic.math_trig = Blockly.Dic.math_single;
Blockly.Dic.math_on_list = function (a) {
    var b = a.getFieldValue("OP");
    switch (b) {
        case "SUM":
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_MEMBER) || "[]";
            a += ".reduce(function(x, y) {return x + y;})";
            break;
        case "MIN":
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_COMMA) || "[]";
            a = "Math.min.apply(null, " + a + ")";
            break;
        case "MAX":
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_COMMA) || "[]";
            a = "Math.max.apply(null, " + a + ")";
            break;
        case "AVERAGE":
            b = Blockly.Dic.provideFunction_("mathMean",
                ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  return myList.reduce(function(x, y) {return x + y;}) / myList.length;", "}"]);
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_NONE) || "[]";
            a = b + "(" + a + ")";
            break;
        case "MEDIAN":
            b = Blockly.Dic.provideFunction_("mathMedian", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  var localList = myList.filter(function (x) {return typeof x == 'number';});", "  if (!localList.length) return null;",
                "  localList.sort(function(a, b) {return b - a;});", "  if (localList.length % 2 == 0) {", "    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;", "  } else {", "    return localList[(localList.length - 1) / 2];", "  }", "}"
            ]);
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_NONE) || "[]";
            a = b + "(" + a + ")";
            break;
        case "MODE":
            b = Blockly.Dic.provideFunction_("mathModes", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(values) {", "  var modes = [];",
                "  var counts = [];", "  var maxCount = 0;", "  for (var i = 0; i < values.length; i++) {", "    var value = values[i];", "    var found = false;", "    var thisCount;", "    for (var j = 0; j < counts.length; j++) {", "      if (counts[j][0] === value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.push([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (var j = 0; j < counts.length; j++) {",
                "    if (counts[j][1] == maxCount) {", "        modes.push(counts[j][0]);", "    }", "  }", "  return modes;", "}"
            ]);
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_NONE) || "[]";
            a = b + "(" + a + ")";
            break;
        case "STD_DEV":
            b = Blockly.Dic.provideFunction_("mathStandardDeviation", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(numbers) {", "  var n = numbers.length;", "  if (!n) return null;", "  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;", "  var variance = 0;",
                "  for (var j = 0; j < n; j++) {", "    variance += Math.pow(numbers[j] - mean, 2);", "  }", "  variance = variance / n;", "  return Math.sqrt(variance);", "}"
            ]);
            a = Blockly.Dic.valueToCode(a, "LIST", Blockly.Dic.ORDER_NONE) || "[]";
            a = b + "(" + a + ")";
            break;
        case "RANDOM":
            b = Blockly.Dic.provideFunction_("mathRandomList", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(list) {", "  var x = Math.floor(Math.random() * list.length);", "  return list[x];", "}"]);
            a = Blockly.Dic.valueToCode(a,
                "LIST", Blockly.Dic.ORDER_NONE) || "[]";
            a = b + "(" + a + ")";
            break;
        default:
            throw Error("Unknown operator: " + b);
    }
    return [a, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.math_modulo = function (a) {
    var b = Blockly.Dic.valueToCode(a, "DIVIDEND", Blockly.Dic.ORDER_MODULUS) || "0";
    a = Blockly.Dic.valueToCode(a, "DIVISOR", Blockly.Dic.ORDER_MODULUS) || "0";
    return [b + " % " + a, Blockly.Dic.ORDER_MODULUS]
};
Blockly.Dic.math_constrain = function (a) {
    var b = Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_COMMA) || "0",
        c = Blockly.Dic.valueToCode(a, "LOW", Blockly.Dic.ORDER_COMMA) || "0";
    a = Blockly.Dic.valueToCode(a, "HIGH", Blockly.Dic.ORDER_COMMA) || "Infinity";
    return ["Math.min(Math.max(" + b + ", " + c + "), " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.math_random_int = function (a) {
    var b = Blockly.Dic.valueToCode(a, "FROM", Blockly.Dic.ORDER_COMMA) || "0";
    a = Blockly.Dic.valueToCode(a, "TO", Blockly.Dic.ORDER_COMMA) || "0";
    return [Blockly.Dic.provideFunction_("mathRandomInt", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(a, b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    var c = a;", "    a = b;", "    b = c;", "  }", "  return Math.floor(Math.random() * (b - a + 1) + a);",
        "}"
    ]) + "(" + b + ", " + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.math_random_float = function (a) {
    return ["Math.random()", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.math_atan2 = function (a) {
    var b = Blockly.Dic.valueToCode(a, "X", Blockly.Dic.ORDER_COMMA) || "0";
    return ["Math.atan2(" + (Blockly.Dic.valueToCode(a, "Y", Blockly.Dic.ORDER_COMMA) || "0") + ", " + b + ") / Math.PI * 180", Blockly.Dic.ORDER_DIVISION]
};
Blockly.Dic.procedures = {};
Blockly.Dic.procedures_defreturn = function (a) {
    var b = Blockly.Dic.variableDB_.getName(a.getFieldValue("NAME"), Blockly.PROCEDURE_CATEGORY_NAME),
        c = "";
    Blockly.Dic.STATEMENT_PREFIX && (c += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_PREFIX, a));
    Blockly.Dic.STATEMENT_SUFFIX && (c += Blockly.Dic.injectId(Blockly.Dic.STATEMENT_SUFFIX, a));
    c && (c = Blockly.Dic.prefixLines(c, Blockly.Dic.INDENT));
    var d = "";
    Blockly.Dic.INFINITE_LOOP_TRAP && (d = Blockly.Dic.prefixLines(Blockly.Dic.injectId(Blockly.Dic.INFINITE_LOOP_TRAP,
        a), Blockly.Dic.INDENT));
    var e = Blockly.Dic.statementToCode(a, "STACK"),
        f = Blockly.Dic.valueToCode(a, "RETURN", Blockly.Dic.ORDER_NONE) || "",
        g = "";
    e && f && (g = c);
    f && (f = Blockly.Dic.INDENT + "return " + f + ";\n");
    for (var k = [], h = 0; h < a.arguments_.length; h++) k[h] = Blockly.Dic.variableDB_.getName(a.arguments_[h], Blockly.VARIABLE_CATEGORY_NAME);
    c = "function " + b + "(" + k.join(", ") + ") {\n" + c + d + e + g + f + "}";
    c = Blockly.Dic.scrub_(a, c);
    Blockly.Dic.definitions_["%" + b] = c;
    return null
};
Blockly.Dic.procedures_defnoreturn = Blockly.Dic.procedures_defreturn;
Blockly.Dic.procedures_callreturn = function (a) {
    for (var b = Blockly.Dic.variableDB_.getName(a.getFieldValue("NAME"), Blockly.PROCEDURE_CATEGORY_NAME), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Dic.valueToCode(a, "ARG" + d, Blockly.Dic.ORDER_COMMA) || "null";
    return [b + "(" + c.join(", ") + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.procedures_callnoreturn = function (a) {
    return Blockly.Dic.procedures_callreturn(a)[0] + ";\n"
};
Blockly.Dic.procedures_ifreturn = function (a) {
    var b = "if (" + (Blockly.Dic.valueToCode(a, "CONDITION", Blockly.Dic.ORDER_NONE) || "false") + ") {\n";
    Blockly.Dic.STATEMENT_SUFFIX && (b += Blockly.Dic.prefixLines(Blockly.Dic.injectId(Blockly.Dic.STATEMENT_SUFFIX, a), Blockly.Dic.INDENT));
    a.hasReturnValue_ ? (a = Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_NONE) || "null", b += Blockly.Dic.INDENT + "return " + a + ";\n") : b += Blockly.Dic.INDENT +
        "return;\n";
    return b + "}\n"
};
Blockly.Dic.texts = {};
Blockly.Dic.text = function (a) {
    return [Blockly.Dic.quote_(a.getFieldValue("TEXT")), Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.text_multiline = function (a) {
    a = Blockly.Dic.multiline_quote_(a.getFieldValue("TEXT"));
    a.includes("\n") && (a = "(" + a + ")");
    return [a, Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.text.forceString_ = function (a) {
    return Blockly.Dic.text.forceString_.strRegExp.test(a) ? a : "String(" + a + ")"
};
Blockly.Dic.text.forceString_.strRegExp = /^\s*'([^']|\\')*'\s*$/;
Blockly.Dic.text_join = function (a) {
    switch (a.itemCount_) {
        case 0:
            return ["''", Blockly.Dic.ORDER_ATOMIC];
        case 1:
            return a = Blockly.Dic.valueToCode(a, "ADD0", Blockly.Dic.ORDER_NONE) || "''", a = Blockly.Dic.text.forceString_(a), [a, Blockly.Dic.ORDER_FUNCTION_CALL];
        case 2:
            var b = Blockly.Dic.valueToCode(a, "ADD0", Blockly.Dic.ORDER_NONE) || "''";
            a = Blockly.Dic.valueToCode(a, "ADD1", Blockly.Dic.ORDER_NONE) || "''";
            a = Blockly.Dic.text.forceString_(b) +
                " + " + Blockly.Dic.text.forceString_(a);
            return [a, Blockly.Dic.ORDER_ADDITION];
        default:
            b = Array(a.itemCount_);
            for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.Dic.valueToCode(a, "ADD" + c, Blockly.Dic.ORDER_COMMA) || "''";
            a = "[" + b.join(",") + "].join('')";
            return [a, Blockly.Dic.ORDER_FUNCTION_CALL]
    }
};
Blockly.Dic.text_append = function (a) {
    var b = Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME);
    a = Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_NONE) || "''";
    return b + " += " + Blockly.Dic.text.forceString_(a) + ";\n"
};
Blockly.Dic.text_length = function (a) {
    return [(Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_FUNCTION_CALL) || "''") + ".length", Blockly.Dic.ORDER_MEMBER]
};
Blockly.Dic.text_isEmpty = function (a) {
    return ["!" + (Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_MEMBER) || "''") + ".length", Blockly.Dic.ORDER_LOGICAL_NOT]
};
Blockly.Dic.text_indexOf = function (a) {
    var b = "FIRST" == a.getFieldValue("END") ? "indexOf" : "lastIndexOf",
        c = Blockly.Dic.valueToCode(a, "FIND", Blockly.Dic.ORDER_NONE) || "''";
    b = (Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_MEMBER) || "''") + "." + b + "(" + c + ")";
    return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.Dic.ORDER_ADDITION] : [b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.text_charAt = function (a) {
    var b = a.getFieldValue("WHERE") || "FROM_START",
        c = Blockly.Dic.valueToCode(a, "VALUE", "RANDOM" == b ? Blockly.Dic.ORDER_NONE : Blockly.Dic.ORDER_MEMBER) || "''";
    switch (b) {
        case "FIRST":
            return [c + ".charAt(0)", Blockly.Dic.ORDER_FUNCTION_CALL];
        case "LAST":
            return [c + ".slice(-1)", Blockly.Dic.ORDER_FUNCTION_CALL];
        case "FROM_START":
            return a = Blockly.Dic.getAdjusted(a, "AT"), [c + ".charAt(" + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL];
        case "FROM_END":
            return a =
                Blockly.Dic.getAdjusted(a, "AT", 1, !0), [c + ".slice(" + a + ").charAt(0)", Blockly.Dic.ORDER_FUNCTION_CALL];
        case "RANDOM":
            return [Blockly.Dic.provideFunction_("textRandomLetter", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(text) {", "  var x = Math.floor(Math.random() * text.length);", "  return text[x];", "}"]) + "(" + c + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
    }
    throw Error("Unhandled option (text_charAt).");
};
Blockly.Dic.text.getIndex_ = function (a, b, c) {
    return "FIRST" == b ? "0" : "FROM_END" == b ? a + ".length - 1 - " + c : "LAST" == b ? a + ".length - 1" : c
};
Blockly.Dic.text_getSubstring = function (a) {
    var b = Blockly.Dic.valueToCode(a, "STRING", Blockly.Dic.ORDER_FUNCTION_CALL) || "''",
        c = a.getFieldValue("WHERE1"),
        d = a.getFieldValue("WHERE2");
    if ("FIRST" != c || "LAST" != d)
        if (b.match(/^'?\w+'?$/) || "FROM_END" != c && "LAST" != c && "FROM_END" != d && "LAST" != d) {
            switch (c) {
                case "FROM_START":
                    var e = Blockly.Dic.getAdjusted(a, "AT1");
                    break;
                case "FROM_END":
                    e = Blockly.Dic.getAdjusted(a, "AT1", 1, !1, Blockly.Dic.ORDER_SUBTRACTION);
                    e = b + ".length - " + e;
                    break;
                case "FIRST":
                    e = "0";
                    break;
                default:
                    throw Error("Unhandled option (text_getSubstring).");
            }
            switch (d) {
                case "FROM_START":
                    a = Blockly.Dic.getAdjusted(a, "AT2", 1);
                    break;
                case "FROM_END":
                    a = Blockly.Dic.getAdjusted(a, "AT2", 0, !1, Blockly.Dic.ORDER_SUBTRACTION);
                    a = b + ".length - " + a;
                    break;
                case "LAST":
                    a = b + ".length";
                    break;
                default:
                    throw Error("Unhandled option (text_getSubstring).");
            }
            b = b + ".slice(" + e + ", " + a + ")"
        } else {
            e = Blockly.Dic.getAdjusted(a, "AT1");
            a = Blockly.Dic.getAdjusted(a, "AT2");
            var f =
                Blockly.Dic.text.getIndex_,
                g = {
                    FIRST: "First",
                    LAST: "Last",
                    FROM_START: "FromStart",
                    FROM_END: "FromEnd"
                };
            b = Blockly.Dic.provideFunction_("subsequence" + g[c] + g[d], ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == c || "FROM_START" == c ? ", at1" : "") + ("FROM_END" == d || "FROM_START" == d ? ", at2" : "") + ") {", "  var start = " + f("sequence", c, "at1") + ";", "  var end = " + f("sequence", d, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]) + "(" + b + ("FROM_END" == c || "FROM_START" ==
                c ? ", " + e : "") + ("FROM_END" == d || "FROM_START" == d ? ", " + a : "") + ")"
        } return [b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.text_changeCase = function (a) {
    var b = {
        UPPERCASE: ".toUpperCase()",
        LOWERCASE: ".toLowerCase()",
        TITLECASE: null
    } [a.getFieldValue("CASE")];
    a = Blockly.Dic.valueToCode(a, "TEXT", b ? Blockly.Dic.ORDER_MEMBER : Blockly.Dic.ORDER_NONE) || "''";
    return [b ? a + b : Blockly.Dic.provideFunction_("textToTitleCase", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(str) {", "  return str.replace(/\\S+/g,", "      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});",
        "}"
    ]) + "(" + a + ")", Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.text_trim = function (a) {
    var b = {
        LEFT: ".replace(/^[\\s\\xa0]+/, '')",
        RIGHT: ".replace(/[\\s\\xa0]+$/, '')",
        BOTH: ".trim()"
    } [a.getFieldValue("MODE")];
    return [(Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_MEMBER) || "''") + b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.text_print = function (a) {
    return "window.alert(" + (Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_NONE) || "''") + ");\n"
};
Blockly.Dic.text_prompt_ext = function (a) {
    var b = "window.prompt(" + (a.getField("TEXT") ? Blockly.Dic.quote_(a.getFieldValue("TEXT")) : Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_NONE) || "''") + ")";
    "NUMBER" == a.getFieldValue("TYPE") && (b = "Number(" + b + ")");
    return [b, Blockly.Dic.ORDER_FUNCTION_CALL]
};
Blockly.Dic.text_prompt = Blockly.Dic.text_prompt_ext;
Blockly.Dic.text_count = function (a) {
    var b = Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_MEMBER) || "''";
    a = Blockly.Dic.valueToCode(a, "SUB", Blockly.Dic.ORDER_NONE) || "''";
    return [Blockly.Dic.provideFunction_("textCount", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle) {", "  if (needle.length === 0) {", "    return haystack.length + 1;", "  } else {", "    return haystack.split(needle).length - 1;", "  }", "}"]) + "(" + b + ", " + a + ")", Blockly.Dic.ORDER_SUBTRACTION]
};
Blockly.Dic.text_replace = function (a) {
    var b = Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_MEMBER) || "''",
        c = Blockly.Dic.valueToCode(a, "FROM", Blockly.Dic.ORDER_NONE) || "''";
    a = Blockly.Dic.valueToCode(a, "TO", Blockly.Dic.ORDER_NONE) || "''";
    return [Blockly.Dic.provideFunction_("textReplace", ["function " + Blockly.Dic.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle, replacement) {", '  needle = needle.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,"\\\\$1")',
        '                 .replace(/\\x08/g,"\\\\x08");', "  return haystack.replace(new RegExp(needle, 'g'), replacement);", "}"
    ]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Dic.ORDER_MEMBER]
};
Blockly.Dic.text_reverse = function (a) {
    return [(Blockly.Dic.valueToCode(a, "TEXT", Blockly.Dic.ORDER_MEMBER) || "''") + ".split('').reverse().join('')", Blockly.Dic.ORDER_MEMBER]
};


Blockly.Dic.variables = {};
Blockly.Dic.variables_get = function (a) {
    return ["@"+Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME), Blockly.Dic.ORDER_ATOMIC]
};
Blockly.Dic.variables_set = function (a) {
    var b = Blockly.Dic.valueToCode(a, "VALUE", Blockly.Dic.ORDER_ASSIGNMENT) || "0";
    return "$" + Blockly.Dic.variableDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME) + ":" + b + "\n"
};
Blockly.Dic.variablesDynamic = {};
Blockly.Dic.variables_get_dynamic = Blockly.Dic.variables_get;
Blockly.Dic.variables_set_dynamic = Blockly.Dic.variables_set;



Blockly.Dic['api_send'] = function (block) {
    // TODO: Assemble Dic into code variable.
    var code = 'Api->send()\n';
    return code;
};

Blockly.Dic['api_sendmsg'] = function (block) {
    var dropdown_name = block.getFieldValue('method');
    var value_code = Blockly.Dic.valueToCode(block, 'code', Blockly.Dic.ORDER_ATOMIC);
    var value_content = Blockly.Dic.valueToCode(block, 'content', Blockly.Dic.ORDER_ATOMIC);
    // TODO: Assemble Dic into code variable.
    var code = 'Api->sendMsg(' + value_content + ')\n';
    return code;
};

Blockly.Dic['getcode'] = function (block) {
    var dropdown_name = block.getFieldValue('type');
    // TODO: Assemble Dic into code variable.
    var code = dropdown_name;
    // TODO: Change ORDER_NONE to the correct strength.
    return [code, Blockly.Dic.ORDER_NONE];
};

Blockly.Dic['toolkit_setconfig'] = function (block) {
    var value_path = Blockly.Dic.valueToCode(block, 'path', Blockly.Dic.ORDER_ATOMIC);
    var value_1 = Blockly.Dic.valueToCode(block, '1', Blockly.Dic.ORDER_ATOMIC);
    var value_2 = Blockly.Dic.valueToCode(block, '2', Blockly.Dic.ORDER_ATOMIC);
    var value_3 = Blockly.Dic.valueToCode(block, '3', Blockly.Dic.ORDER_ATOMIC);
    // TODO: Assemble Dic into code variable.
    var code = 'Toolkit->setConfig(' + value_path + '\\,' + value_1 + '\\,' + value_2 + '\\,' + value_3 + ')';
    return code;
};

Blockly.Dic['toolkit_getconfig'] = function (block) {
    var value_path = Blockly.Dic.valueToCode(block, 'path', Blockly.Dic.ORDER_ATOMIC);
    var value_1 = Blockly.Dic.valueToCode(block, '1', Blockly.Dic.ORDER_ATOMIC);
    var value_2 = Blockly.Dic.valueToCode(block, '2', Blockly.Dic.ORDER_ATOMIC);
    var value_3 = Blockly.Dic.valueToCode(block, '3', Blockly.Dic.ORDER_ATOMIC);
    // TODO: Assemble Dic into code variable.
    var code = 'Toolkit->getConfig(' + value_path + '\\,' + value_1 + '\\,' + value_2 + '\\,' + value_3 + ')';
    // TODO: Change ORDER_NONE to the correct strength.
    return [code, Blockly.Dic.ORDER_NONE];
};